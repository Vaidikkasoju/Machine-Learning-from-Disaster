{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.12","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":3136,"databundleVersionId":26502,"sourceType":"competition"}],"dockerImageVersionId":30918,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# Titanic: Machine Learning from Disaster ðŸš¢\n# By: VAIDIK KASOJU\n# Baseline Model: Logistic Regression\n\n# 1. Import Libraries\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import accuracy_score\n\n# 2. Load the Data\ntrain_df = pd.read_csv('/kaggle/input/titanic/train.csv')\ntest_df = pd.read_csv('/kaggle/input/titanic/test.csv')\n\n# 3. Quick Preprocessing\ndef preprocess(df):\n    df['Sex'] = df['Sex'].map({'male': 0, 'female': 1})\n    df['Age'] = df['Age'].fillna(df['Age'].median())\n    df['Fare'] = df['Fare'].fillna(df['Fare'].median())\n    df['Embarked'] = df['Embarked'].fillna('S')\n    df['Embarked'] = df['Embarked'].map({'S': 0, 'C': 1, 'Q': 2})\n    df['FamilySize'] = df['SibSp'] + df['Parch'] + 1\n    return df\n\ntrain_df = preprocess(train_df)\ntest_df = preprocess(test_df)\n\n# 4. Features and Labels\nfeatures = ['Pclass', 'Sex', 'Age', 'Fare', 'Embarked', 'FamilySize']\nX = train_df[features]\ny = train_df['Survived']\nX_test = test_df[features]\n\n# 5. Model Training\nmodel = RandomForestClassifier(n_estimators=100, random_state=42)\nmodel.fit(X, y)\n\n# 6. Make Predictions\npredictions = model.predict(X_test)\n\n# 7. Create Submission File\nsubmission = pd.DataFrame({\n    'PassengerId': test_df['PassengerId'],\n    'Survived': predictions\n})\nsubmission.to_csv('/kaggle/working/submission.csv', index=False)\n\n# Show success message and preview the submission\nprint(\"âœ… submission.csv successfully saved!\")\n\n# Preview the top 5 rows of the submission file\nprint(submission.head())\n\n# Optional: Show feature importances (for fun insights!)\nimportances = pd.Series(model.feature_importances_, index=features)\nimportances.sort_values(ascending=False).plot(kind='bar', title='Feature Importances')\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-06T05:50:01.097913Z","iopub.execute_input":"2025-04-06T05:50:01.098244Z","iopub.status.idle":"2025-04-06T05:50:01.532221Z","shell.execute_reply.started":"2025-04-06T05:50:01.098221Z","shell.execute_reply":"2025-04-06T05:50:01.531537Z"}},"outputs":[],"execution_count":null}]}